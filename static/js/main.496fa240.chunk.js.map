{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["readFileAsText","file","Promise","resolve","reject","fileReader","FileReader","onload","result","onerror","readAsText","convertToTable","text","split","map","row","header","rows","convertedText","join","forEach","App","useState","fileText","setFileText","processFile","event","a","files","target","console","log","className","type","name","id","onChange","dangerouslySetInnerHTML","__html","replace","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAsCA,SAASA,EAAeC,GACtB,OAAO,IAAIC,SAAgB,SAACC,EAASC,GACnC,IAAMC,EAAa,IAAIC,WAEvBD,EAAWE,OAAS,WAClBJ,EAASE,EAAWG,QAAqB,KAG3CH,EAAWI,QAAUL,EAErBC,EAAWK,WAAWT,MAI1B,SAASU,EAAeC,GAAuB,IAAD,EAClBA,EAAKC,MAAM,MAAMC,KAAI,SAACC,GAC9C,OAAOA,EAAIF,MAAM,QAFyB,iBACrCG,EADqC,KAC1BC,EAD0B,WAKxCC,EAAgB,IAAMF,EAAOG,KAAK,KAAO,KAM7C,OAJAF,EAAKG,SAAQ,SAACL,GACZG,EAAgBA,EAAgB,OAASH,EAAII,KAAK,KAAO,OAGpDD,EAGMG,MA/Df,WAA6B,IAAD,EACMC,mBAAS,IADf,mBACnBC,EADmB,KACTC,EADS,KAGpBC,EAAW,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,yDACZC,EAAQF,EAAMG,OAAOD,MADT,gBAIhBJ,EAAY,wCAJI,gDAOKxB,EAAe4B,EAAM,IAP1B,OAORhB,EAPQ,OASdY,EAAYb,EAAeC,IATb,kDAWdkB,QAAQC,IAAR,MAEAP,EAAY,wCAbE,0DAAH,sDAkBjB,OACE,sBAAKQ,UAAU,MAAf,UACE,2LACA,uBAAOC,KAAK,OAAOC,KAAK,MAAMC,GAAG,MAAMC,SAAUX,IAEjD,qBACEY,wBAAyB,CACvBC,OAAQf,EAASgB,QAAQ,MAAO,iBChB3BC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.496fa240.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App(): JSX.Element {\n  const [fileText, setFileText] = useState(\"\");\n\n  const processFile = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n\n    if (!files) {\n      setFileText(\"読み込み失敗\");\n    } else {\n      try {\n        const text = await readFileAsText(files[0]);\n\n        setFileText(convertToTable(text));\n      } catch (error) {\n        console.log(error);\n\n        setFileText(\"読み込み失敗\");\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <p>csvファイルを読み込み、backlogのテーブル形式に変換します。</p>\n      <input type=\"file\" name=\"csv\" id=\"csv\" onChange={processFile} />\n\n      <div\n        dangerouslySetInnerHTML={{\n          __html: fileText.replace(/\\n/g, \"<br />\"),\n        }}\n      />\n    </div>\n  );\n}\n\nfunction readFileAsText(file: Blob): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    const fileReader = new FileReader();\n\n    fileReader.onload = () => {\n      resolve((fileReader.result as string) || \"\");\n    };\n\n    fileReader.onerror = reject;\n\n    fileReader.readAsText(file);\n  });\n}\n\nfunction convertToTable(text: string): string {\n  const [header, ...rows] = text.split(\"\\n\").map((row) => {\n    return row.split(\",\");\n  });\n\n  let convertedText = \"|\" + header.join(\"|\") + \"|h\";\n\n  rows.forEach((row) => {\n    convertedText = convertedText + \"\\n |\" + row.join(\"|\") + \"|\";\n  });\n\n  return convertedText;\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}